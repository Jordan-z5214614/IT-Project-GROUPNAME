#!/usr/bin/env python3
#TODO Flesh out user inputs. Configure to take registers/addresses from a config file

#Import modbus protocol 
from pymodbus.client.sync import ModbusTcpClient as ModbusClient
#Import modbus server driver
import modbusServer
#Import python libs
from multiprocessing import Process
import paramiko
import configparser
import sys
import time

#Connects to the targeted PLC, retrieves the config file and then starts the PLCDriver process on that device
def plc_start(hostname,username,password):

    #Sets up ssh connection
    ssh = paramiko.SSHClient()
    ssh.load_system_host_keys()
    ssh.connect(hostname,username=username,password=password)

    #Retrieves config file and stores in plc_config
    ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command('cat IT-Project-GROUPNAME/prototype1/PLC/config.txt')
    plc_config = ssh_stdout.read().decode('ascii').strip('\n')

    #Starts the PLCDriver process on remote device
    ssh.exec_command('python3 IT-Project-GROUPNAME/prototype1/PLC/PLCDriver.py')

    #Closes the SSH connection
    ssh.close()

    return(plc_config)

#For each PLC listed in the supevisor config file calls start_plc and loads the PLCs config into a temp config object.
#It loads the PLCs address and it's individual paramater dict, which contains the names and modbus register addresses for each parameter,
#and stores it in the plc_list in the format <String address, dict param_list<String name, int Address>>
#Note, it will ONLY load PLCs specified in teh supevisor config file
def load_plcs():

    #Initialise a PLC list
    plc_list = {}

    #Read in supevisor config file
    config = configparser.RawConfigParser()
    file = r'config.txt'
    config.read(file)

    #Iterate for each PLC specified in the supevisor config file
    for plc in config.items('plc list'):

        #Loads credentials for PLC 
        #TODO confgiure to use keys instead of plaintext logins
        username = config.get(plc[0],'username')
        password = config.get(plc[0],'password')
        hostname = plc[1]

        #Set up a temp configparser to store PLC config data
        plc_config = configparser.RawConfigParser()

        #Call plc_start and store returned config data in plc_config object
        plc_config.read_string(plc_start(hostname,username,password))

        #Init a parameter list
        param_list = {}

 
        param_list.update(plc_config.items('parameter addresses'))
        plc_list.update({plc_config.get('address','address'):param_list})

    return(plc_list)

#Starts a server in a thread, then takes a PWM value from the user. 
def main():

    server = Process(target=modbusServer.run_server)

    try:
        server.start()

        plc_list = load_plcs()

        client = ModbusClient('supevisor',5020)
        client.connect()

        while True:
            pwm = input("Enter PWM: ")
            client.write_register(0,int(pwm),unit=0) #register address and device address are hard coded for testing. Will be dynamic from config file in end product

    except KeyboardInterrupt:
        print("\nShutting down")
        server.terminate()
        client.close()

if __name__ == "__main__":

    main()
